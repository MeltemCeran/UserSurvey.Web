@model UserInsightSurvey.Models.Concrete.DashboardStatsViewModel
@using UserInsightSurvey.Models.Concrete;
@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="min-h-screen flex items-center justify-center bg-gray-100 py-8">
    <div class="w-full max-w-5xl bg-white rounded-lg shadow-lg p-6 md:p-10">
        <h2 class="text-2xl font-bold text-indigo-700 mb-8 text-center">Admin Dashboard</h2>
        <div class="mb-8 grid grid-cols-1 md:grid-cols-2 gap-6">
            <div class="bg-indigo-50 rounded p-4 text-center">
                <div class="text-3xl font-bold">@Model.TotalUsers</div>
                <div class="text-gray-700">Toplam Üye</div>
            </div>
            <div class="bg-indigo-50 rounded p-4 text-center">
                <div class="text-3xl font-bold">@Model.UsersWithAnswers</div>
                <div class="text-gray-700">Anketi Cevaplayan Üye</div>
            </div>
            <div class="bg-indigo-50 rounded p-4 text-center">
                <div class="text-3xl font-bold">@Model.UsersWithoutAnswers</div>
                <div class="text-gray-700">Cevaplamayan Üye</div>
            </div>
            <div class="bg-indigo-50 rounded p-4 text-center">
                <div class="text-3xl font-bold">@Model.TotalQuestions</div>
                <div class="text-gray-700">Toplam Soru</div>
            </div>
        </div>
        <h3 class="text-xl font-semibold text-indigo-700 mb-4 mt-8">Sorular Bazında Cevap Dağılımı</h3>
        @{
            var chartQuestions = Model.QuestionDistributions.Where(q => q.OptionCounts != null && q.OptionCounts.Count > 0 && q.OptionCounts.All(o => !string.IsNullOrEmpty(o.OptionContent))).ToList();
            var textQuestions = Model.QuestionDistributions.Where(q => q.TextAnswers != null && q.TextAnswers.Count > 0).ToList();
        }
        <div id="charts-container">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                @for (int i = 0; i < chartQuestions.Count; i++)
                {
                    var q = chartQuestions[i];
                    <div class="mb-8 flex flex-col items-center bg-white rounded shadow p-4 min-h-[280px] w-full">
                        <div class="font-semibold mb-2 text-center w-full min-h-[48px] flex items-center justify-center">@q.QuestionText</div>
                        <div class="flex justify-center w-full">
                            <canvas id="chart-@i" style="width:320px;max-width:100%;height:180px;"></canvas>
                        </div>
                    </div>
                }
            </div>
            @if (textQuestions.Count > 0)
            {
                <div class="mt-10">
                    <h4 class="text-lg font-semibold text-indigo-700 mb-2">Questions Answered as Text</h4>
                    @foreach (var q in textQuestions)
                    {
                        <div class="mb-4">
                            <div class="font-semibold mb-1">@q.QuestionText</div>
                            <ul class="list-disc ml-6">
                                @foreach (var answer in q.TextAnswers)
                                {
                                    <li>@answer</li>
                                }
                            </ul>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        var distributions = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.QuestionDistributions));
        var chartQuestions = distributions.filter(function(q) {
            return q.OptionCounts && q.OptionCounts.length > 0 && q.OptionCounts.every(function(o) { return o.OptionContent && o.OptionContent !== "" });
        });
        chartQuestions.forEach(function(q, idx) {
            var ctx = document.getElementById('chart-' + idx).getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: q.OptionCounts.map(function(o) { return o.OptionContent }),
                    datasets: [{
                        label: 'Answer Count',
                        data: q.OptionCounts.map(function(o) { return o.Count }),
                        backgroundColor: 'rgba(99,102,241,0.7)'
                    }]
                },
                options: {
                    responsive: true,
                    plugins: { legend: { display: false } },
                    scales: { y: { beginAtZero: true, precision:0 } }
                }
            });
        });
    });
</script> 